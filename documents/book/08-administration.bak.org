#+title: Administration
#+bibliography: ../library/emacs-writing-studio.bib
#+startup:      content
#+macro:        ews /Emacs Writing Studio/
:NOTES:
- [ ] [[https://blog.dornea.nu/2023/09/21/emacs-and-the-cybernetic-productivity/][Emacs and the Cybernetic Productivity - blog.dornea.nu]]
- [ ] [[https://orgmode.org/manual/Moving-subtrees.html][Moving subtrees (The Org Manual)]]
- [ ] [[https://git.sr.ht/~swflint/third-time][~swflint/third-time - Third Time support for Emacs - sourcehut git]]
- [ ] [[https://www.youtube.com/watch?v=NkhgIB64zgc][Emacs: Diary and Calendar - YouTube]]
- [ ] [[https://karl-voit.at/2020/08/14/project-mgt-draft/][A Draft Workflow for Advanced Project Management Using Org Mode and Org Edna]]
- [ ] Pommodoro
- [ ] Clear your head
- [ ] Myth of multitasking
- [ ] Time poverty
- [ ] [[https://datamanagement.hms.harvard.edu/collect/file-naming-conventions][File Naming Conventions | Data Management]]
:END:

* Getting Things Done
In our time-poor world, everybody wants to cram more stuff into their day. Judging by the abundant literature, you can become so productive that "getting things done" [cite:@allen_2005_gett] only takes a "four-hour work week" [cite:@ferriss_2011_hour]. We achieve these almost magical powers by learning from the "habits of highly effective people" [cite:@covey_1990_seven] who seem to "eat frogs" for breakfast [cite:@tracy_2016_eat].

Methods to increase your productivity a dime-a-dozen on the internet and productivity books with well-meaning advice are available in every bookshop. In the wake of all this great advice, developers release a plethora of software to help you become more productive. The market is saturated with solutions, from software behemoths such as Microsoft's OneNote to nimble mobile apps such as Todoist.

All these methods boil down to three basic phases: set a goal, define the actions to achieve that goal and undertake these actions. These principles might sound simplistic, but it is the basic truth. This plethora of methods merely discuss different ways on how to manage these three steps effectively and efficiently. The central theme are different means to process the enormous amount of information that we are exposed to every day.

Org mode is an ideal system to help you getting things done. The Org mode package not only allows you to write prose, it is also helps you to manage actions and projects. As with any other Emacs package, it provides virtually unlimited freedom to implement your favourite method to get stuff done.

This section shows how to use Org Mode to manage your projects and tasks, loosely based on David Allen's /Getting Things Done/ (GTD) method. David Allen describes iterative five steps to become more productive [cite:@allen_2005_gett]:

1. /Capture/: Empty your mind
2. /Clarify/: Describe what it all means
3. /Organise/ Place it where it belongs
4. /Reflect/: Reflect on your progress
5. /Engage/: Take action
  
** /Capture/: Empty Your Mind
One of the reasons we are often not as productive as we like is because our minds are filled with stuff. When your brain is full of thoughts about what you should be doing, creative and productive thoughts are suppressed. The other problem with keeping ideas in your head is the risk that they will disappear into the fog. I am sure you all recognise the experience of having the most wonderful idea when enjoying your morning shower, but half an hour later you are unable to recall your gem.

The first step to getting things done is to empty your mind. This is not a Buddhism-inspired quest for enlightenment, but a simple technique to help you focus. Open a new Org Mode file and call it something like =todo.org=, or whatever you fancy. You can also use the Inbox as explained in section [[#sec:fleeting]]. 

For the next fifteen minutes, write down everything that is floating around in your head. Dump the contents of your brain into this virgin Org Mode file. Start every new idea with an asterisk so that they become headlines. Your list will contain a jumble of random things. From minor household tasks to big future projects you want to do one day. Don't filter your thoughts. Just write them down.

For the next twenty-five minutes, focus only on this task and write down everything that is in your head. Don't multitask and give this activity your undivided attention. Multitasking is the enemy of productivity because our brains can only focus on one intellectual activity at a time. The fact that magicians can so easily fool people illustrates why multitasking is a fool's errand. Perhaps listen to some music with the Emacs EMMS package to keep you focused.

Don't spend any time thinking about these tasks. Don't worry about when you'll need to do it or in what order they need to be done, that is a concern for later. Ensure that your mind is empty by the time you complete your list. If the list only has about a dozen items, then it is still incomplete. For most people, fifty actionable items, projects and fuzzy goals are not unusual. If you are overwhelmed by the list then don't shoot the messenger as it merely reflects your life. If it takes you longer than twenty five minutes to empty your mind, then take a five minute break and start again. You now have a long list of all the stuff you need to get done. 

#+begin_example
 * Mow the lawn
 * Clean up the backyard
 * Improve my job skills
 * Learn how to use Emacs
 * Write an ebook about ... (fill in your speciality)
 * Empty your e-mail inbox
 * Prepare presentation for the quarterly meeting next week
 * And so on, and so on ...
#+end_example

** /Clarify/: Describe what it all means
Did you notice that most things on the list above, apart from items 6 and 7, are more work than just one action? In GTD-speak, these items are projects that take more than one action to complete. Other items on your list might be goals. A goal, such as learning how to use Emacs, is less defined as a project and is more aspirational. Your list will be a mess of tasks, projects, goals and vague ideas.

Your next task is to organise them. Firstly you can add some order and hierarchy to the list with the =ALT= and arrow keys. =M-up= and =M-down= will move a heading up or down, while =M-right= and =M-left= will promote or demote your entry. With these four keystrokes, you can organise your list so that projects and tasks go together and create some order in the chaos that came from your mind. So the garden becomes a project with two tasks:

#+begin_example
,,* Gardening
,,** Clean up the backyard
,,** Mow the lawn
#+end_example

You can also add notes or link images and other documents below any heading to provide some context to the task by hitting enter at the end of the headline and typing. Your list is starting to take shape now. The following steps will add more context to your tasks. 

** /Organise/: Place it where it belongs
:PROPERTIES:
:CUSTOM_ID: sec:organise
:END:
After adding some structure to your list of actions

The problem with most todo-lists is that you get overwhelmed by the amount of stuff to be done. But in reality, most actions don't need or can't be progressed. You can be more precise in your records and mark items as the next action to be undertaken, or mark the ones where you are waiting for somebody else.

- /NEXT/: The next action to be taken.
- /TODO/: Something to be done in the future (either scheduled or as yet undetermined).
- /WAIT/: If you are waiting for somebody to do something, then mark it as such.

Org can associate each headline in a document with a workflow state. By default, there are only two states, =TODO= or =DONE=. You can change the state of a heading with the shift and arrow keys. Org mode will cycle between the two states. The keywords are commonly written in all caps, but that is not necessary.

You can define workflow states any way you like. Adding the following Lisp lines to your init file will set your workflow states. The states after the vertical bar will be marked as completed, usually coloured green.

If you have many states, cycling through them can be tedious. The =C-c C-t= command provides a popup menu to quickly select your option. You add the menu letter between parentheses after the keyword like this:

There are, in principle, no limitations to how you use this functionality. You can define action states as you please, whatever suits your workflow.

The basic principle of the GTD approach is not to have massive lists of items that you like to do one day but that you define the next action that needs to be done to achieve your goal, or schedule activities in your diary. This method ensures that only a subset of activities is in your consciousness and  you don't get overwhelmed by your inactivity as action lists tend to be long list of promises to our future selves.

You can set different keywords can for each Org file. 

#+begin_example
,#+TODO: NEXT(n) TODO(t) WAIT(w) | DONE(d) CANCELLED(c)
#+end_example

Now that your list is nicely organised in the stuff you need to do, add dates to some of the tasks. Scheduling a task to a specific date is to commit your recalcitrant future self to the action.

You can add the date that the task is scheduled or a deadline by which is should be completed. A scheduled date indicates the date or period you plan to work on the task. A deadline is the time the task needs to be completed.

To add a scheduled date, use =C-c C-s= when on a headline. Emacs will pop up a calendar that you can use to select a date. The shift and arrow buttons move the timestamp by day or week. The =<= and =>= symbols move you a month in time. Press enter when done, and the date appears below the headline. You can add a deadline in a similar way but with the =C-c C-a= keystroke.

Timestamps use the ISO 8601 format: year, month, day. This format avoids any confusion between American formats and the rest of the world. Editing a timestamp is easy. Place your cursor on either the year, month or date and use the arrow keys to move it up or down.

#+begin_src org :tangle no
  ,* TODO Complete Org-Mode article
  SCHEDULED: <2021-05-08 Sat>
#+end_src

Scheduled dates can also set a regular schedule with a recurring scheduled or deadline. For example, suppose you add, for instance, =+7d= at the end of the date. In that case, Org mode recalculates the date every time you complete the task and resets the status to =TODO=. You can also use the letters =w=, =m= and =y= for scheduling a job weekly, monthly or yearly. Some actions have to be undertaken weekly on the same day, but in some instances it is better to restart the clock every time it is completed.

My tax return has a deadline of 30 September and appears annually on that date, indicated by =+1y=. It is a deadline instead of a schedule because the tax office enforces this on me.

The next action is my weekly review of the inboxes. In this case, the seven days are recalculated every time I complete the action. So if I complete the review on 13 May instead of 11 May, the new date will become 20 May. The double plus symbol recalculates the new date from the day of the status change.

The last action states that I need to clean the dishwasher once each month. The =.+= indicate t

Org mode has three types of recurring actions. The new scheduled date or deadline depends on when the action is completed.

The most direct method is to add a plus and the recurrence frequency in either days (=d=), weeks (=w=), months (=m=) or years (=y=). In the example below the new date when completed is one week after the current scheduled date, irrespective of when the task is marked as completed. This type of recurring task is only suitable for tings that must occur on a defined date. Completing it more than one week after the original schedule will still only add one week and thus scheduling your date in the past. For example, if completing this task on 8 August, the new scheduled date will be 15 August.

#+begin_example
,* TODO Weekly review of inbox
SCHEDULED: <2024-06-30 Sun +7d>
#+end_example

It is also possible to reschedule a task a defined period after it is marked as completed by adding a double plus sign. The example below will add seven days to the current scheduled date every time the action is completed, irrespective of when. For example, if we complete this task on 8 August, the new scheduled date will become 17 August.
  
#+begin_example
,* TODO Weekly review
SCHEDULED: <2024-06-30 Sun ++7d>
#+end_example

The last method
        
#+begin_example
,* TODO Weekly review
SCHEDULED: <2024-06-30 Sun .+7d>
#+end_example

Deadlines are hard promises so it might be useful to be warned in advance when it is due. The example below sets a deadline for an upcoming total solar eclipse in Australia. I don't wan to miss this event, so the =-12m= cookie ensures that this deadline is added to the diary twelve months before it occurs, so I can organise my trip to the central desert.

#+begin_example
,* Solar Eclipse Central Australia
SCHEDULED: <2028-07-22 Sat -12m>
#+end_example

Only add a scheduled date if this is the time that you plan to do the action. Try not to add too overload your agenda with self-imposed scheduled tasks. You are better off setting a tas as the next action and determine when to do these in your daily reviews. A deadline is only helpful if there is an external expectation that you need to complete something by a specific date, for example, get travel insurance before your flight leaves.

Each todo item is a heading and you can create parent-child relationships between action by adding subheadings underneath an action.

Some todo items in your list could use a checklist to remind yourself of the required steps. Org mode allows you to add checkbox items anywhere in your document by adding =[ ]= after a list indicator. Using =M-S <RET>= after a tick box item creates a new list item with a tick box. Ticking and un-ticking any items is as simple as hitting =C-c C-c= (~org-toggle-checkbox~). The snippet below is an example of a todo item with a deadline, some notes and a checklist.

#+begin_example
 * TODO Submit tax return [1/3]
   DEADLINE: <2021-09-30 Mon +1y>
   Tax accountant: 0407 555 283
   - [X] Collect records
   - [ ] Prepare overview
   - [-] Set appointment with accountant
#+end_example

You can convert a plain list item to a checkbox item, or vice versa, with =C-u C-c C-c=. Adding two universal arguments add a horizontal line through the box to indicate that this item is no longer relevant (=C-u C-u C-c C-c=).

If you have a long list you might want to have an indicator that shows your progress, or lack thereof. You can add a so-called cookie. Add either =[/]= or [0%] in the line above the tick boxes and Org mode will record your progress next time an item changes, as shown in the example above.

You can also convert list items to headings and back again. The ~org-ctrl-c-star~ function (=C-c C-*=) converts a paragraph to a heading. If the line contains a checkbox, it becomes a TODO item. Using =C-c C--= (~org-ctrl-c-minus~) converts a paragraph or a heading to a list item.

** /Reflect/: Reflect on your progress
:PROPERTIES:
:ID:       e2d88931-29cc-405f-af36-c5d090fbc372
:END:
After a week or so, your inbox will start filling with stuff. Your inbox is not just one location, but a collection of places where you gather information. /Emacs Writing Studio/ uses the Org mode capture mechanism as an inbox, but it can also be a physical inbox to collect papers. A digital notebook on your phone or a physical diary to collect notes are also viable options.

My personal inbox consists of my Org mode inbox file, my email inbox, a cloud-based notes application in my phone a physical inbox and my physical diary. As part of my weekly review I promise myself to empty these locations and process them into my system using this flowchart, which is based on the classic GTD model.

During your regular review, you assess each bit of information you collected. If it is not actionable, the you either ditch it, otherwise capture it in Denote as a permanent note or an attachment (section [[#sec:denote]]). The Denote file naming convention is the ideal structure to use as an archive for anything that comes through your inbox that is worth keeping.

If the new item is actionable and it only takes a few minutes to do, then just go ahead and do it; don't waste your time formally registering the action.

Lastly, if the inbox item is actionable, bur requires some time, you can add it as an action to your todo list.

** /Engage/: Take action



* Manage Files

** Introduction


** Basic Operation of Dired
Emacs is a Swiss-Army chainsaw, but it cannot do everything. Sometimes you might like to open a file in other software, such as your image editor or video player. You can open files with external software by pressing =&= after which dired will ask for the appropriate software. You need to type the name of the executable file of the software you like to use, e.g. =gimp=.

It is sometimes useful to copy the name of a file to the kill ring with the =w= key, so you can use it to rename the file. So to rename a file, copy the name with =w=, rename the file with =R= and paste the existing name with =C-y= and edit the name to your new version.

You can select and deselect files for deletion (killed) with the =d= and =u= buttons. After you selected the files you like to delete, press =x= to execute the deletion. Press capital =D= if you like to remove a single file. When you delete or trash a currently open file, Emacs will also ask you to close the appropriate buffer. By default, Emacs permanently removes files. The /Emacs Writing Studio/ is configured so that files are moved to the recycle bin.

You can select multiple files to work on at the same time by marking them. The =m= button marks a file, and the =u= removes the mark. The capital =U= removes all marks in the buffer. The =t= key reverses your markings, which is helpful when you want to select everything but one or two files.

This method requires you to manually select each file. You can also use regular expressions to select files. Press =% m= to open the regular expression selection prompt. For example, =^2023.*_journal*= selects all Denote files that start with the =2023= and that have the =journal= file tag.  Now press =t= to invert the selection and =k= to remove the selected files from view. This sequence is a useful method to find related files.

After you selected multiple files in this manner, you can use all file commands to act on the selected targets, for example moving all 2023 files with the =_journal= tag to another folder.

** Recent Files and Bookmarks
Whenever you return to Emacs you might want to open a file you were working on recently. The recent files minor mode (~recentf-mode~) provides a transient list of the files you most recently opened. 

This minor mode saves the most recent opened files when you exit Emacs to a file in your configuration folder. However, it might be more useful to save the recent files regularly to ensure it is saved. The ~run-at-time~ function runs a function at a regular interval, in this case every five minutes. The ~recentf-edit-list~ function opens the file with your recent acquisitions and lets you delete selected files.

By default, the recent files mode stores the last twenty opened files, which you can change by modifying the ~recentf-max-saved-items~ variable.

Recent files are transient as they are continuously updated as you open new files. For a more permanent list of files you like to open, use [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Bookmarks.html][bookmarks]].

You can store a file as a bookmark with =C-x r m= (~bookmark-set~). The bookmark will also store the location of the cursor, so you can maintain multiple bookmarks for a file. The default name for the bookmark is the name of the file. You can also enter a bespoke name in the minibuffer before hitting =ENTER=.

To view a list of all bookmarks in the minibuffer and select the one you like to open, use =C-x r b= (~bookmark-jump~). 

Bookmarks are saved in the =bookmarks= file in your configuration folder every time a new bookmark is created. The ~bookmark-save-flag~ is set to one so that the bookmarks file is saved every time you add a new one. The default value only saves it when you exit Emacs, which mean you could loose bookmarks in the unlikely event of an Emacs or system crash.

If you like to remove  bookmark no longer required then use the ~bookmark-delete~ function, which has no default keybinding but is bound to =C-x r D= in the /Emacs Writing Studio/ configuration.

** Viewing Images

** The Image-Dired Package


Yet another method of previewing your images is by marking the ones you need and generate inline thumbnails inside the Dired buffer with =C-t C-t= (~image-dired-dired-toggle-marked-thumbs~). The same shortcut also removes the thumbnails.

The active image is marked with a flashing border around the thumbnail and its filename is displayed on the top of the thumbnail window.

You can navigate the thumbnails with the arrow keys. The =<= and =>= keys take you to the start or end of the collection. You can remove a thumbnail from the collection with =C-d=. If you have selected more images than thumbnails that can fit on page, then image-dired tracks your movement, so as your cursor moves up or down, the thumbnails refresh.

To view an image, hit =RET= when the thumbnail is marked. You cycle through the marked images in your collection with the =space= and =backspace= buttons, or =C-<left>= /  =C-<right>=.

But why manually flick through your album if you can let Emacs do this for you? The =S= key starts a slideshow with each image shown five seconds by default. You can configure the delay with the ~image-dired-slideshow-delay~ variable, or drive the slideshow manually with the =space= and =backspace= keys, or =C-<left>= /  =C-<right>=.

The main image display is in image mode, so all the actions described in the previous section apply.

As usual, =q= quits the image or thumbnail window.

The image-dired software can also create a plain text database of images with searchable tags and thumbnail descriptions. 

You tag images directly from a dired buffer. The =C-t t= keystrokes lets you tag the selected files. You can retrieve the tags in a future session using =C-t f= and view the image thumbnails with =C-t d=, as described above. You can tag images from within a thumbnail buffer with the =t t= shortcut. You can also add a comment to the image by pressing =c= in the thumbnail viewer.

The file name, tags and comments show in the mini buffer as you move through the image thumbnails: =directory: filename (tags): comment=.

Emacs stores the metadata in the =image-dired= directory in your configuration folder in the =.image-dired_db= file. This is a plain text file that lists each file name and the tags an comment.

Retrieving tagged files only selects images with tags in the directory of the current dired buffer. It does not work across multiple folders. 

This tagging system is nice, but it creates an integrity vulnerability in that it separates tags and files. When you accidentally remove the database, all metadata is lost. You will also loose access to the metadata when you rename an image.

An alternative method to tag files is to use the Denote file naming convention, which encodes metadata into the name of the file.
#+begin_export html
&nbsp;
#+end_export

Denote is a package to produce and maintain plain text notes, but it can also be used to maintain a collection of binary (non-text) files. When using the [[{{< ref "/productivity/taking-notes-with-emacs-denote.org" >}}][Denote file naming convention]] for your images, you can mark parts of you collection using regular expressions. The Denote file naming convention encodes four bits of metadata about a file into the filename. Only the timestamp is compulsory and serves as a unique identifier:

- Timestamp in ISO 8601 format
- An alphanumeric signature (starting with double equality sign (~==~)
- The title in [[https://www.freecodecamp.org/news/snake-case-vs-camel-case-vs-pascal-case-vs-kebab-case-whats-the-difference/][kebab-case]] (starting with double dash ~==~)
- Keywords in [[https://www.freecodecamp.org/news/snake-case-vs-camel-case-vs-pascal-case-vs-kebab-case-whats-the-difference/][snake_case]] (starting with double underscore =__=)

For example, one photo in my collection is: =19930825T132000--forbidden-city-throne-palace-of-heavenly-purity__china.jpg=. So this photo was taken on 25 August 1993, the title describes the topic of the photograph and 

I can now go into Dired and mark files with regular expressions, searching for each of these fields. For example, using =%m _china= marks photos taken in China, or =%m -city= all images with the word "city" in their title. Using the Dired convention for naming files is not only great for notes, it also helps you manage your photo collection.

The ~denote-rename-file~ function (=C-c w R=) lets you construct a Denote-compliant file name for existing images or other binary files. This function uses the last modified date as the identifier by default. But when you are sorting old collections you might want to add a date that is different to the last modified one. Adding the universal argument (=C-u=) will also ask you to provide a date and time, i.e. (=C-u C-c w R=).

Emacs is a powerful piece of software but it is mostly limited to editing text. To meaningfully work with images, you will need another package. Image-dired lets you open images in external viewers or editors by setting one variable.

Pressing =C-enter= opens the file in an external viewer or editor. You can tell Emacs which external viewer to user by configuring the =image-dired-external-viewer= variable. I linked it to the GIMP (GNU Image Manipulation Program). The content of this variable obviously depends on your system and preferred viewer.

When you are in an image-dired buffer, you open the external viewer with =C-enter=. Confusingly, when you are in a normal dired buffer, this function is bound to =C-t x=. /Emacs Writing Studio/ remaps the keys so that you can use =C-enter= in dired and in image-dired to open an image in your favourite external editor.
